# data file for the FLTK User Interface Designer (FLUID)
version 2,0003 
images_dir ./ 
i18n 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
decl {\#include <stdio.h>} {} 

decl {\#include <stdlib.h>} {} 

decl {\#include "conf.h"} {} 

decl {\#include <efltk/Fl_Locale.h>} {} 

decl {\#include <efltk/Fl_Util.h>} {} 

class edisplayconf {open
} {
  decl {bool _finish;} {public
  }
  Function {edisplayconf()} {open
  } {
    Fl_Window win {
      label {Display configuration}
      callback {_finish = true;} open
      private xywh {211 112 265 335} hide
    } {
      Fl_Tabs {} {open
        xywh {5 5 255 285}
      } {
        Fl_Group group_mouse {
          label Mouse open
          private xywh {0 20 255 265} align 4
        } {
          Fl_Value_Slider slider_accel {
            label Acceleration
            xywh {25 25 220 18} type HORIZONTAL align 1 maximum 10 step 1 value 2
          }
          Fl_Value_Slider slider_thresh {
            label {Threshold (pixels)}
            xywh {25 65 220 18} type HORIZONTAL align 1 maximum 20 step 1 value 4
          }
        }
        Fl_Group group_bell {
          label Bell open
          private xywh {0 20 255 265} hide
        } {
          Fl_Value_Slider slider_volume {
            label {Volume in %}
            xywh {25 25 220 18} type HORIZONTAL align 1 maximum 100 step 1 value 50
          }
          Fl_Value_Slider slider_pitch {
            label {Pitch in Hz}
            xywh {25 70 220 18} type HORIZONTAL align 1 minimum 100 maximum 1000 step 1 value 440
          }
          Fl_Value_Slider slider_duration {
            label {Duration in ms}
            xywh {25 115 220 18} type HORIZONTAL align 1 maximum 1000 step 1 value 200
          }
          Fl_Button {} {
            label Test
            callback {testbellCB();}
            xywh {180 165 60 25}
          }
        }
        Fl_Group group_keyboard {
          label Keyboard open
          private xywh {0 20 255 265} align 5 hide
        } {
          Fl_Check_Button check_autorepeat {
            label {  Repeat key activated}
            xywh {24 25 221 20} selection_color 2 value 1
          }
          Fl_Value_Slider slider_click {
            label {Click volume %}
            xywh {25 65 220 18} type HORIZONTAL align 1 maximum 100 step 1 value 50
          }
        }
        Fl_Group group_screen {
          label Screen open selected
          xywh {0 20 255 265} hide
        } {
          Fl_Button but_activate {
            label {&Test}
            callback {TestBlankCB();}
            xywh {165 187 80 25}
          }
          Fl_Box {} {
            xywh {10 1 234 55}
          }
          Fl_Value_Slider slider_delay {
            label {Activation delay (min)}
            xywh {25 77 220 18} type HORIZONTAL align 1 minimum 5 maximum 120 step 1 value 15
          }
          Fl_Check_Button check_blanking {
            label { Screen blanker activated}
            xywh {23 25 222 20} selection_color 2 value 1
          }
          Fl_Box {} {
            xywh {10 100 234 37}
          }
          Fl_Value_Slider slider_pattern {
            label {Pattern change delay (min)}
            xywh {25 152 220 18} type HORIZONTAL align 1 deactivate minimum 1 maximum 5 step 0 value 2
          }
          Fl_Group {} {open
            xywh {30 105 210 25}
          } {
            Fl_Round_Button radio_blank {
              label Blank
              callback {radioCB();}
              xywh {0 5 105 20} type RADIO selection_color 1 value 1
            }
            Fl_Round_Button radio_pattern {
              label Pattern
              callback {radioCB();}
              xywh {115 5 95 20} type RADIO selection_color 1
            }
          }
        }
      }
      Fl_Button {} {
        label {&Cancel}
        callback {cancelCB();}
        xywh {190 300 70 25} align 16
      }
      Fl_Button but_kbd_apply {
        label {&Apply}
        callback {applyCB();}
        xywh {115 300 70 25}
      }
      Fl_Return_Button {} {
        label OK
        callback {okCB();}
        xywh {40 300 70 25} shortcut 0xd
      }
    }
  }
  Function {~edisplayconf()} {} {}
  Function {Run()} {open
  } {
    code {_finish = false;
	win->show();
	while (!_finish) Fl::wait();
	win->hide();} {}
  }
  Function {make_window()} {} {}
  Function {radioCB()} {open
  } {
    code {int l_blank;

  l_blank = (int)radio_blank->value();
  if (l_blank)
    slider_pattern->deactivate();
  else
    slider_pattern->activate();} {}
  }
} 

Function {main(int ac,char **av)} {open return_type int
} {
  code {fl_init_locale_support("edisplayconf", PREFIX"/share/locale");
app = new edisplayconf();
read_disp_configuration();
app->Run();
delete app;
return 0;} {}
} 

decl {edisplayconf *app;} {public
} 
