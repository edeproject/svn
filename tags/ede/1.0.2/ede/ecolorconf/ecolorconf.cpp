// generated by Fast Light User Interface Designer (fluid) version 2,0003

#include "ecolorconf.h"
// Colors and fonts settings dialog for EDE is (C) Copyright 2000-2002 by Martin Pekar, this program is provided under the terms of GNU GPL v.2, see file COPYING for more information.
#include <efltk/Fl_Color_Chooser.h>
#include "ecolorutils.h"
#include <edeconf.h>

Fl_Window* windowColorSettings;

static void cb_windowColorSettings(Fl_Window*, void*) {
  exit(0);
}

Fl_Button* colorBox;

Fl_Button* labelColorBox;

Fl_Button* selectionColorBox;

Fl_Button* selectionTextColorBox;

Fl_Button* offColorBox;

Fl_Button* highlightColorBox;

Fl_Button* highlightLabelColorBox;

Fl_Button* textColorBox;

Fl_Button* backgroundBox;

Fl_Button* textBackgroundBox;

Fl_Button* tooltipBox;

Fl_Button* tooltipTextColorButton;

Fl_Check_Button* tooltipsEnableEffects;

Fl_Check_Button* tooltipsEnable;

Fl_Choice* tooltipsEffectType;

Fl_Value_Input* tooltipsDelay;

Fl_Input* labelFontInput;

static void cb_labelFontInput(Fl_Input*, void*) {
  //updateFontAll();
}

Fl_Input* textFontInput;

static void cb_textFontInput(Fl_Input*, void*) {
  //updateFontAll();
}

Fl_Input_Browser* labelSize;

Fl_Input_Browser* textSize;

Fl_Input_Browser* fontEncoding;

static void cb_(Fl_Button*, void*) {
  Fl_String ret = fl_font_dialog();
  if (!ret.empty()){
  	labelFontInput->value(ret);
  
  }
;}

static void cb_1(Fl_Button*, void*) {
  Fl_String ret = fl_font_dialog();
  if (!ret.empty()){
  	textFontInput->value(ret);
  
  }
;}

Fl_Check_Button* menusEnableEffects;

Fl_Check_Button* menusEnableSubwindowEffects;

Fl_Choice* menusEffectType;

Fl_Value_Input* menusSpeed;

Fl_Value_Input* menusDelay;

Fl_Check_Button* mdiAnimation;

Fl_Check_Button* mdiOpaqueAnimation;

Fl_Check_Button* imagesStateEffect;

static void cb_Save(Fl_Button*, void*) {
  saveSchemeAs();
}

Fl_Check_Button* allApplyRadioButton;

Fl_Input_Browser* schemeListBox;

static void cb_schemeListBox(Fl_Input_Browser*, void*) {
  getSchemeColors();
}

static void cb_OK(Fl_Button*, void*) {
  //windowColorSettings->hide();
  saveActiveScheme();
  applyColors();
  saveEfltkConfig();
  exit(0);
}

static void cb_Apply(Fl_Button*, void*) {
  saveActiveScheme();
  applyColors();
  saveEfltkConfig();
}

static void cb_Cancel(Fl_Button*, void*) {
  exit(0);
}

int main (int argc, char **argv) {

  Fl_Window* w;
  fl_init_locale_support("ecolorconf", PREFIX"/share/locale");
   {Fl_Window* o = windowColorSettings = new Fl_Window(330, 360, _("Colors and fonts settings"));
    w = o;
    o->callback((Fl_Callback*)cb_windowColorSettings);
     {Fl_Tabs* o = new Fl_Tabs(3, 5, 320, 195);
      o->color((Fl_Color)0xfffffffe);
       {Fl_Group* o = new Fl_Group(1, 23, 318, 171, _("Default colors"));
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
         {Fl_Button* o = colorBox = new Fl_Button(12, 98, 65, 20, _("Color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = labelColorBox = new Fl_Button(87, 98, 65, 20, _("Label color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = selectionColorBox = new Fl_Button(167, 65, 65, 20, _("Selection color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = selectionTextColorBox = new Fl_Button(242, 65, 65, 20, _("Selection text color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = offColorBox = new Fl_Button(12, 145, 65, 20, _("Off color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = highlightColorBox = new Fl_Button(167, 145, 65, 20, _("Highlight color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = highlightLabelColorBox = new Fl_Button(242, 145, 65, 20, _("Highlight label color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = textColorBox = new Fl_Button(87, 145, 65, 20, _("Text color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = backgroundBox = new Fl_Button(12, 45, 65, 20, _("Background"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = textBackgroundBox = new Fl_Button(87, 45, 65, 20, _("Text background"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
        o->end();
      }
       {Fl_Group* o = new Fl_Group(1, 23, 318, 171, _("Tooltips"));
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
        o->hide();
         {Fl_Button* o = tooltipBox = new Fl_Button(157, 45, 65, 20, _("Tooltip color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
         {Fl_Button* o = tooltipTextColorButton = new Fl_Button(237, 45, 65, 20, _("Tooltip text color"));
          o->box(FL_DOWN_BOX);
          o->callback((Fl_Callback*)ChangeBoxColor);
          o->align(133);
        }
        tooltipsEnableEffects = new Fl_Check_Button(7, 45, 145, 25, _("Enable effects"));
        tooltipsEnable = new Fl_Check_Button(7, 15, 145, 25, _("Enabled"));
         {Fl_Choice* o = tooltipsEffectType = new Fl_Choice(77, 82, 115, 23, _("Effect type:")); o->begin();
          o->align(132);
          new Fl_Item(_("None"));
          new Fl_Item(_("Animation"));
          new Fl_Item(_("Fading"));
          o->end();
        }
        tooltipsDelay = new Fl_Value_Input(77, 120, 50, 25, _("Delay:"));
        o->end();
      }
       {Fl_Group* o = new Fl_Group(1, 23, 318, 171, _("Fonts"));
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
        o->hide();
         {Fl_Input* o = labelFontInput = new Fl_Input(75, 15, 167, 23, _("Label font:"));
          o->callback((Fl_Callback*)cb_labelFontInput);
          o->align(132);
          /*Fl_Font* fonts; int numfonts = fl_list_fonts(fonts);
          for (int i = 0; i < numfonts; i++)
          { 
          o->begin(); o->add (fonts[i]->name()); o->end(); }*/
        }
         {Fl_Input* o = textFontInput = new Fl_Input(75, 45, 167, 23, _("Text font:"));
          o->callback((Fl_Callback*)cb_textFontInput);
          o->align(132);
          /*Fl_Font* fonts; int numfonts = fl_list_fonts(fonts);
          for (int i = 0; i < numfonts; i++)
          { o->begin(); o->add (fonts[i]->name()); o->end(); }*/
        }
         {Fl_Input_Browser* o = labelSize = new Fl_Input_Browser(77, 80, 45, 20, _("Label size:"));
          o->align(132);
        }
         {Fl_Input_Browser* o = textSize = new Fl_Input_Browser(77, 110, 45, 20, _("Text size:"));
          o->align(132);
        }
         {Fl_Input_Browser* o = fontEncoding = new Fl_Input_Browser(202, 80, 102, 23, _("Encoding:"));
        }
         {Fl_Button* o = new Fl_Button(257, 14, 35, 25, _("..."));
          o->callback((Fl_Callback*)cb_);
        }
         {Fl_Button* o = new Fl_Button(257, 44, 35, 25, _("..."));
          o->callback((Fl_Callback*)cb_1);
        }
        o->label(_(o->label()));
        o->end();
      }
       {Fl_Group* o = new Fl_Group(1, 23, 318, 171, _("Menus"));
        o->hide();
        menusEnableEffects = new Fl_Check_Button(7, 5, 305, 25, _("Enable effects"));
        menusEnableSubwindowEffects = new Fl_Check_Button(7, 30, 305, 25, _("Enable subwindow effects"));
         {Fl_Choice* o = menusEffectType = new Fl_Choice(77, 60, 115, 23, _("Effect type:")); o->begin();
          o->align(132);
          new Fl_Item(_("None"));
          new Fl_Item(_("Animation"));
          new Fl_Item(_("Fading"));
          o->end();
        }
        menusSpeed = new Fl_Value_Input(77, 95, 45, 25, _("Speed:"));
        menusDelay = new Fl_Value_Input(212, 95, 50, 25, _("Delay:"));
        o->end();
      }
       {Fl_Group* o = new Fl_Group(1, 23, 318, 171, _("Others"));
        o->hide();
        mdiAnimation = new Fl_Check_Button(12, 10, 300, 25, _("Enable MDI animation"));
        mdiOpaqueAnimation = new Fl_Check_Button(12, 40, 300, 25, _("MDI opaque animation"));
        imagesStateEffect = new Fl_Check_Button(12, 70, 300, 25, _("Enable images state effect"));
        o->end();
      }
      o->end();
    }
     {Fl_Group* o = new Fl_Group(3, 210, 320, 100);
      o->box(FL_DOWN_BOX);
       {Fl_Button* o = new Fl_Button(197, 20, 80, 25, _("&Save as..."));
        o->callback((Fl_Callback*)cb_Save);
      }
       {Fl_Check_Button* o = allApplyRadioButton = new Fl_Check_Button(9, 60, 299, 25, _("Ap&ply colors to all programs"));
        o->align(132|FL_ALIGN_INSIDE);
        o->when(FL_WHEN_CHANGED);
      }
       {Fl_Input_Browser* o = schemeListBox = new Fl_Input_Browser(12, 22, 175, 23, _("Schemes:")); o->begin();
        o->callback((Fl_Callback*)cb_schemeListBox);
        o->align(FL_ALIGN_TOP | FL_ALIGN_LEFT);
        o->when(FL_WHEN_CHANGED);
        o->type(1);
        fillItems();
        o->end();
      }
      o->end();
    }
     {Fl_Button* o = new Fl_Button(75, 328, 80, 25, _("&OK"));
      o->callback((Fl_Callback*)cb_OK);
    }
     {Fl_Button* o = new Fl_Button(160, 328, 80, 25, _("&Apply"));
      o->callback((Fl_Callback*)cb_Apply);
    }
     {Fl_Button* o = new Fl_Button(245, 328, 80, 25, _("&Cancel"));
      o->callback((Fl_Callback*)cb_Cancel);
    }
    o->end();
  }
  //updateFontAll();
  loadEfltkConfig();
  w->show(argc, argv);
  return  Fl::run();
}

void ChangeBoxColor(Fl_Button *box, void *) {
  Fl_Button *colorBox = box;
  Fl_Color oldColor = colorBox->color();
  Fl_Color defColor = oldColor;
  fl_color_chooser(_("Choose color"), defColor);
  if (defColor != oldColor) 
  {
  	colorBox->color(defColor);
  	colorBox->highlight_color(defColor);
  	colorBox->redraw();
  }
}
