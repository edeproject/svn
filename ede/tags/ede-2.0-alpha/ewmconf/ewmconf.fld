# data file for the FLTK User Interface Designer (FLUID)
version 2,0003 
images_dir ./ 
i18n 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
decl {// Window manager settings for EDE is (C) Copyright 2001-2002 by Martin Pekar, this program is provided under the terms of GNU GPL v.2, see file COPYING for more information.} {} 

decl {\#include <efltk/Fl_Color_Chooser.h>} {} 

decl {\#include <efltk/Fl_File_Dialog.h>} {} 

decl {\#include <efltk/Fl_Config.h>} {} 

decl {\#include <efltk/Fl_Locale.h>} {} 

decl {\#include "ewm.h"} {} 

Function {} {open
} {
  code {fl_init_locale_support("ewmconf", PREFIX"/share/locale");
readConfiguration();} {}
  Fl_Window {} {
    label {Window manager settings} open
    xywh {793 429 320 370} visible
  } {
    Fl_Tabs {} {open
      xywh {2 5 318 325} color 16
    } {
      Fl_Group {} {
        label {&Titlebar} open
        private xywh {1 29 316 295} align 5
      } {
        Fl_Choice {} {
          label {Text align:}
          callback {title_align = (int)o->value();} open
          xywh {83 13 105 22}
          extra_code {o->value(title_align);}
        } {
          Fl_Item {} {
            label Left
            }
          Fl_Item {} {
            label Right
            }
          Fl_Item {} {
            label Center
            }
        }
        Fl_Value_Input {} {
          label {Height:}
          callback {title_height = (int)o->value();}
          xywh {243 13 60 22} minimum 10 maximum 50 step 1 value 20
          extra_code {o->value(title_height);}
        }
        Fl_Button titlebarLabelColorButton {
          label {Titlebar label color: }
          callback {changeBoxColor(titlebarLabelColorButton);
title_normal_color_text = (int) titlebarLabelColorButton->color();}
          xywh {85 55 60 20} align 132 box DOWN_BOX
          extra_code {o->color((Fl_Color)title_normal_color_text);}
        }
        Fl_Button titlebarColorButton {
          label {Titlebar color: }
          callback {changeBoxColor(titlebarColorButton);
title_normal_color = (int) titlebarColorButton->color();}
          xywh {85 120 60 20} align 132 box DOWN_BOX
          extra_code {o->color((Fl_Color) title_normal_color);}
        }
        Fl_Group {} {open
          xywh {153 45 160 110}
        } {
          Fl_Button titlebarActiveLabelColorButton {
            label {Titlebar active label color: }
            callback {changeBoxColor(titlebarActiveLabelColorButton);
title_active_color_text = (int) titlebarActiveLabelColorButton->color();}
            xywh {90 10 60 20} align 132 box DOWN_BOX
            extra_code {o->color((Fl_Color) title_active_color_text);}
          }
          Fl_Button titlebarActiveColorButton {
            label {Titlebar active color: }
            callback {changeBoxColor(titlebarActiveColorButton);
title_active_color  = (int) titlebarActiveColorButton->color();}
            xywh {90 75 60 20} align 132 box DOWN_BOX
            extra_code {o->color((Fl_Color)title_active_color);}
          }
        }
        Fl_Choice titlebarDrawGrad {
          label {Box type:}
          callback {title_draw_grad = titlebarDrawGrad->value();} open
          xywh {85 157 163 23} align 132
          extra_code {o->value(title_draw_grad);}
        } {
          Fl_Item {} {
            label Flat
            }
          Fl_Item {} {
            label {Horizontal shade}
            }
          Fl_Item {} {
            label {Thin down}
            }
          Fl_Item {} {
            label {Up box}
            }
          Fl_Item {} {
            label {Down box}
            }
          Fl_Item {} {
            label Plastic
            }
        }
        Fl_Check_Button useThemeButton {
          label {&Use theme}
          callback {if (useThemeButton->value()) {
	themePathInput->activate();
	browse_btn->activate();
	titlebarDrawGrad->deactivate();
	titlebarColorButton->deactivate();
	titlebarActiveColorButton->deactivate();
}
else
{
	themePathInput->deactivate();
	browse_btn->deactivate();
	titlebarDrawGrad->activate();
	titlebarColorButton->activate();
	titlebarActiveColorButton->activate();

}

use_theme = useThemeButton->value();}
          xywh {8 220 300 20}
          extra_code {o->value(use_theme);}
        }
        Fl_Input themePathInput {
          label {Path:}
          callback {theme_path = themePathInput->value();}
          xywh {65 247 210 23} deactivate
          extra_code {themePathInput->value(theme_path);}
        }
        Fl_Button browse_btn {
          label {...}
          callback {char *file_types = _("Themes (*.theme), *.theme, All files (*.*), *");
const char *fileName = fl_select_file(themePathInput->value(), file_types, _("Themes..."));    
if (fileName) { 
  themePathInput->value(fileName);
  theme_path = fileName;
}}
          xywh {280 247 25 23} deactivate
        }
        Fl_Divider {} {
          label label
          xywh {8 190 300 25} color 16
        }
        Fl_Divider {} {
          label label
          xywh {8 85 297 25} color 16
        }
      }
      Fl_Group {} {
        label {&Resizing} open
        xywh {3 20 310 305} align 5 hide
      } {
        Fl_Check_Button animateButton {
          label {Animate size changes}
          callback {if(animateButton->value()) animateSlider->activate();
else animateSlider->deactivate();
animate = animateButton->value();}
          xywh {10 10 300 20} value 1
          extra_code {o->value(animate);}
        }
        Fl_Value_Slider animateSlider {
          label {Speed:}
          callback {animate_speed = (int)animateSlider->value();}
          xywh {70 35 235 20} type {HORIZONTAL|Fl_Slider::TICK_ABOVE} align 4 box DOWN_BOX text_size 10 minimum 5 maximum 20 step 2 value 14 slider_size 8
          extra_code {o->value(animate_speed);
if(animate) o->activate(); else o->deactivate();}
        }
        Fl_Divider {} {
          label label
          xywh {0 60 300 25}
        }
        Fl_Check_Button opaqueResize {
          label {Show window content while resizing}
          callback {opaque_resize = opaqueResize->value()}
          xywh {10 85 290 20}
          extra_code {o->value(opaque_resize);}
        }
      }
    }
    Fl_Button {} {
      label {&OK}
      callback {writeConfiguration();
applyConfiguration();
exit(0);}
      private xywh {67 337 80 25} shortcut 0xff0d
    }
    Fl_Button {} {
      label {&Apply}
      callback {writeConfiguration();
applyConfiguration();}
      private xywh {152 337 80 25}
    }
    Fl_Button {} {
      label {&Cancel}
      callback {exit(0);}
      private xywh {237 337 80 25} shortcut 0xff1b
    }
  }
  code {useThemeButton->do_callback(FL_DIALOG_BTN);} {selected
  }
} 

Function {changeBoxColor(Fl_Button *box)} {open return_type void
} {
  code {Fl_Button *colorBox = box;
Fl_Color oldColor = colorBox->color();
Fl_Color defColor = oldColor;
fl_color_chooser(_("Choose color"), defColor);
if ( defColor != oldColor ) {
	colorBox->color(defColor);
	colorBox->redraw();
}} {}
} 
