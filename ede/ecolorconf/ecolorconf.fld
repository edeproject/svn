# data file for the FLTK User Interface Designer (FLUID)
version 2,0003 
images_dir ./icons 
i18n 
header_name {.h} 
code_name {.cpp} 
gridx 5 
gridy 5 
snap 3
decl {// Colors and fonts settings dialog for EDE is (C) Copyright 2000-2002 by Martin Pekar, this program is provided under the terms of GNU GPL v.2, see file COPYING for more information.} {} 

decl {\#include <efltk/Fl_Color_Chooser.h>} {} 

decl {\#include "ecolorutils.h"} {} 

Function {} {open
} {
  code {fl_init_locale_support("ecolorconf", PREFIX"/share/locale");} {}
  Fl_Window windowColorSettings {
    label {Colors and fonts settings}
    callback {exit(0);} open
    xywh {313 129 330 360} hide
  } {
    Fl_Tabs {} {open
      private xywh {3 5 320 195} color 0xfffffffe
    } {
      Fl_Group {} {
        label {Default colors} open
        xywh {1 23 318 171} align 5
      } {
        Fl_Button colorBox {
          label Color
          callback ChangeBoxColor
          xywh {12 98 65 20} align 133 box DOWN_BOX
        }
        Fl_Button labelColorBox {
          label {Label color}
          callback ChangeBoxColor
          xywh {87 98 65 20} align 133 box DOWN_BOX
        }
        Fl_Button selectionColorBox {
          label {Selection color}
          callback ChangeBoxColor
          xywh {167 65 65 20} align 133 box DOWN_BOX
        }
        Fl_Button selectionTextColorBox {
          label {Selection text color}
          callback ChangeBoxColor
          xywh {242 65 65 20} align 133 box DOWN_BOX
        }
        Fl_Button offColorBox {
          label {Off color}
          callback ChangeBoxColor
          xywh {12 145 65 20} align 133 box DOWN_BOX
        }
        Fl_Button highlightColorBox {
          label {Highlight color}
          callback ChangeBoxColor
          xywh {167 145 65 20} align 133 box DOWN_BOX
        }
        Fl_Button highlightLabelColorBox {
          label {Highlight label color}
          callback ChangeBoxColor
          xywh {242 145 65 20} align 133 box DOWN_BOX
        }
        Fl_Button textColorBox {
          label {Text color}
          callback ChangeBoxColor
          xywh {87 145 65 20} align 133 box DOWN_BOX
        }
        Fl_Button backgroundBox {
          label Background
          callback ChangeBoxColor selected
          xywh {12 45 65 20} align 133 box DOWN_BOX
        }
        Fl_Button textBackgroundBox {
          label {Text background}
          callback ChangeBoxColor
          xywh {87 45 65 20} align 133 box DOWN_BOX
        }
      }
      Fl_Group {} {
        label Tooltips open
        xywh {1 23 318 171} align 5 hide
      } {
        Fl_Button tooltipBox {
          label {Tooltip color}
          callback ChangeBoxColor
          xywh {157 45 65 20} align 133 box DOWN_BOX
        }
        Fl_Button tooltipTextColorButton {
          label {Tooltip text color}
          callback ChangeBoxColor
          xywh {237 45 65 20} align 133 box DOWN_BOX
        }
        Fl_Check_Button tooltipsEnableEffects {
          label {Enable effects}
          xywh {7 45 145 25}
        }
        Fl_Check_Button tooltipsEnable {
          label Enabled
          xywh {7 15 145 25}
        }
        Fl_Choice tooltipsEffectType {
          label {Effect type:}
          xywh {77 82 115 23} align 132
        } {
          Fl_Item {} {
            label None
            }
          Fl_Item {} {
            label Animation
            }
          Fl_Item {} {
            label Fading
            }
        }
        Fl_Value_Input tooltipsDelay {
          label {Delay:}
          xywh {77 120 50 25}
        }
      }
      Fl_Group {} {
        label Fonts open
        xywh {1 23 318 171} align 5 hide
        extra_code {o->label(_(o->label()));}
      } {
        Fl_Input labelFontInput {
          label {Label font:}
          callback {//updateFontAll();}
          xywh {75 15 167 23} align 132
          extra_code {\#include <efltk/Fl_Input_Browser.h>
\#include <efltk/Fl_Item.h>
/*Fl_Font* fonts; int numfonts = fl_list_fonts(fonts);
for (int i = 0; i < numfonts; i++)
{ 
o->begin(); o->add (fonts[i]->name()); o->end(); }*/}
          class Fl_Input
        }
        Fl_Input textFontInput {
          label {Text font:}
          callback {//updateFontAll();}
          xywh {75 45 167 23} align 132
          extra_code {\#include <efltk/Fl_Input_Browser.h>
\#include <efltk/Fl_Item.h>
/*Fl_Font* fonts; int numfonts = fl_list_fonts(fonts);
for (int i = 0; i < numfonts; i++)
{ o->begin(); o->add (fonts[i]->name()); o->end(); }*/}
          class Fl_Input
        }
        Fl_Input labelSize {
          label {Label size:}
          xywh {77 80 45 20} align 132
          class Fl_Input_Browser
        }
        Fl_Input textSize {
          label {Text size:}
          xywh {77 110 45 20} align 132
          class Fl_Input_Browser
        }
        Fl_Input fontEncoding {
          label {Encoding:}
          xywh {202 80 102 23}
          extra_code {\#include <efltk/Fl_Input_Browser.h>}
          class Fl_Input_Browser
        }
        Fl_Button {} {
          label {...}
          callback {Fl_String ret = fl_font_dialog();
if (!ret.empty()){
	labelFontInput->value(ret);

}}
          xywh {257 14 35 25}
          extra_code {extern Fl_String fl_font_dialog();}
        }
        Fl_Button {} {
          label {...}
          callback {Fl_String ret = fl_font_dialog();
if (!ret.empty()){
	textFontInput->value(ret);

}}
          xywh {257 44 35 25}
          extra_code {extern Fl_String fl_font_dialog();}
        }
      }
      Fl_Group {} {
        label Menus open
        xywh {1 23 318 171} hide
      } {
        Fl_Check_Button menusEnableEffects {
          label {Enable effects}
          xywh {7 5 305 25}
        }
        Fl_Check_Button menusEnableSubwindowEffects {
          label {Enable subwindow effects}
          xywh {7 30 305 25}
        }
        Fl_Choice menusEffectType {
          label {Effect type:} open
          xywh {77 60 115 23} align 132
        } {
          Fl_Item {} {
            label None
            }
          Fl_Item {} {
            label Animation
            }
          Fl_Item {} {
            label Fading
            }
        }
        Fl_Value_Input menusSpeed {
          label {Speed:}
          xywh {77 95 45 25}
        }
        Fl_Value_Input menusDelay {
          label {Delay:}
          xywh {212 95 50 25}
        }
      }
      Fl_Group {} {
        label Others open
        xywh {1 23 318 171} hide
      } {
        Fl_Check_Button mdiAnimation {
          label {Enable MDI animation}
          xywh {12 10 300 25}
        }
        Fl_Check_Button mdiOpaqueAnimation {
          label {MDI opaque animation}
          xywh {12 40 300 25}
        }
        Fl_Check_Button imagesStateEffect {
          label {Enable images state effect}
          xywh {12 70 300 25}
        }
      }
    }
    Fl_Group {} {open
      xywh {3 210 320 100} box DOWN_BOX
    } {
      Fl_Button {} {
        label {&Save as...}
        callback {saveSchemeAs();}
        private xywh {197 20 80 25}
      }
      Fl_Check_Button allApplyRadioButton {
        label {Ap&ply colors to all programs}
        xywh {9 60 299 25} align 148 when CHANGED
      }
      Fl_Choice schemeListBox {
        label {Schemes:}
        callback {getSchemeColors();} open
        xywh {12 22 175 23} align 5 when CHANGED
        extra_code {\#include <efltk/Fl_Input_Browser.h>
o->type(1);
fillItems();}
        class Fl_Input_Browser
      } {}
    }
    Fl_Button {} {
      label {&OK}
      callback {//windowColorSettings->hide();
saveActiveScheme();
applyColors();
saveEfltkConfig();
exit(0);}
      private xywh {75 328 80 25}
    }
    Fl_Button {} {
      label {&Apply}
      callback {saveActiveScheme();
applyColors();
saveEfltkConfig();}
      private xywh {160 328 80 25}
    }
    Fl_Button {} {
      label {&Cancel}
      callback {exit(0);}
      private xywh {245 328 80 25}
    }
  }
  code {//updateFontAll();
loadEfltkConfig();} {}
} 

Function {ChangeBoxColor(Fl_Button *box, void *)} {return_type void
} {
  code {Fl_Button *colorBox = box;
Fl_Color oldColor = colorBox->color();
Fl_Color defColor = oldColor;
fl_color_chooser(_("Choose color"), defColor);
if (defColor != oldColor) 
{
	colorBox->color(defColor);
	colorBox->highlight_color(defColor);
	colorBox->redraw();
}} {}
} 
