#!/usr/bin/env sh
#
# Ede NetInstall
# A simple network installer for equinox.
#
# Do not attempt to save this file (unless for temporary) 
# since it will be changed for each new version (of this script or for new package releases)
#
# Prefered usage forms: 
#  1. wget -qO- http://ede.sf.net/netinstall | sh
#  2. lynx --source http://ede.sf.net/netinstall | sh
#
# Some environment stuff which affect further things: 
#
#  WGET         - wget path, command, additional parameters
#  MD5SUM       - path to md5sum
#  NOROOTCHECK  - do not check if we are root
#  IGNORECHECK  - if set, do not check if ede/efltk are installed
#  EDEFLAGS     - configure flags for ede
#  EFLTKFLAGS   - configure flags for efltk
#
# Note: if there is needs for patching, patches should be generated in form eg.:
#  diff -uNr efltk/ efltksvn/ > efltk-2.0.6.patch
#
# Bugs, etc. direct to: "karijes@users.sf.net"

VERSION="0.2"

######################################################

EDE_PACKAGE="ede-1.2.tar.gz"
EDE_SUM="7bffdd825c6a32f3c99e081f2e3a4c73"
EDE_PATCH=""

EFLTK_PACKAGE="efltk-2.0.7.tar.gz"
EFLTK_SUM="f0300fd2fec47d4b05823297032ddb9f"

# make sure url ends with '/'
PATCHES_URL="http://ede.sf.net/patches/"

# dirs inside archives
EDE_DIR="ede"
EFLTK_DIR="efltk"

# some internal flags for compilation
EDEFLAGS_INTERNAL=""
EFLTKFLAGS_INTERNAL=" --disable-unixODBC --disable-mysql"

# make sure links ends with '/'
MIRRORS="
http://switch.dl.sourceforge.net/sourceforge/ede/
http://easynews.dl.sourceforge.net/sourceforge/ede/
http://optusnet.dl.sourceforge.net/sourceforge/ede/
http://jaist.dl.sourceforge.net/sourceforge/ede/
http://ufpr.dl.sourceforge.net/sourceforge/ede/"

######################################################

# as far as I know, everyone keeps 'which' to /usr/bin/which;
# we have to use full path to 'which' since some shells provides
# builtin one, and that one is different story
FIND="/usr/bin/which"

PATCH="`$FIND patch` -t -p0"

EXTRACT_BZ2="tar -xjpf"
# gz is prefered
EXTRACT_GZ="tar -xzpf"

# some vars which users can override

#WGET="${WGET:=`$FIND wget` -c}"
[ -z $WGET ] && WGET="`$FIND wget` -c"

if [ "$MD5SUM" = "" ]; then
	# check if we are on BSDs since they
	# use md5 -r to obtain the same output
	platform=`uname`
	case $platform in
		*BSD)
			MD5SUM=`$FIND md5`
			# bsd's output looks like 'MD5 (XXX) = sum'
			SUMSTR="s/.*= //g";;
	 	*)
			MD5SUM=`$FIND md5sum`
			# linux output looks like 'sum = XXX'
			# TODO: solaris, rest ???
			SUMSTR="s/ .*//g";;
	esac
fi

######################################################

ealert() {
	echo "!! $1"
}

eprint() {
	echo ": $1"
}

# modify this according to needs for patchings
# patch -t -p0 < efltk-2.0.6.patch
# diff -uNr efltk/ efltksvn/ > efltk-2.0.6.patch
patch_files() {
	patch_name=$1
	patch_url=$2
	dir_to_patch=$3

	# ok, patch name empty, do nothing
	if [ $patch_name = "" ]; then
		return
	fi

	# file is not here, so download it
	echo "Fetching patch $patch_name..."
	patch_real_url="$2$1"
	if [ ! -f "$patch_name" ]; then
		$WGET $patch_real_url

		if [ $? -ne 0 ]; then
			ealert "$patch_name can't be downloaded. Quitting..."
			exit 1
		fi
	fi

	if [ ! -f "$patch_name" ]; then
		ealert "FATAL: seems bad file downloaded. Quitting..."
		exit 1
	fi

	if [ ! -d "$dir_to_patch" ]; then
		ealert "$dir_to_patch is missing ?!?"
		exit 1
	fi

	$PATCH < $patch_name

	if [ $? -ne 0 ]; then
		ealert "Seems patching went wrong. Please report this as bug"
		exit 1
	else
		eprint "Patching went fine, continuing..."
	fi
}

# see if we have all things that should be there
prepare() {
	# check can we write in current directory
	currdir=`pwd`
	if [ ! -w "$currdir" ]; then
		ealert "Can't write to $currdir, where currently this script resides. Either move this"
		ealert "script to somewhere else of make this directory writeable"
		exit 1
	fi

	# check if we are root
	if [ `id -u` -ne 0 ]; then
		if [ "$NOROOTCHECK" = "" ]; then
			ealert "Seems you are not root. You can continue with this, althought installation will"
			ealert "be skipped. To remove this message, just set NOROOTCHECK=1 in your console"
			exit 1
		fi
	fi

	# check is ede installed via 'efltk-config -g'
	# but first look for efltk-config
	efltkc=`$FIND efltk-config 2> /dev/null`
	if [ "$efltkc" != "" ]; then
		if [ "$IGNORECHECK" = "" ]; then
			$efltkc -g 2> /dev/null

			if [ $? -eq 0 ]; then
				ealert "Seems an older version of ede or efltk installed. You have to remove it first or you"
				ealert "can set IGNORECHECK=1 in your console, to remove this message"
				exit 1
			fi
		fi
	fi

	# check is wget present
	# first clean $WGET from possible flags, so '-x' don't scream
	wget_cmd=`echo $WGET | sed -e 's/ .*//g'`
	if [ ! -x $wget_cmd ]; then
		ealert "wget is missing! You have to install it first, or set WGET to full path"
		exit 1
	fi

	# check is md5sum present
	# do the same as for $WGET (screaming part)
	md5sum_cmd=`echo $MD5SUM | sed -e 's/ .*//g'`
	if [ ! -x $md5sum_cmd ]; then
		ealert "md5sum is missing! You have to install it first, or set MD5SUM to full path"
		exit 1
	fi

	# check is patch present
	patch_cmd=`echo $PATCH | sed -e 's/ .*//g'`
	if [ ! -x $patch_cmd ]; then
		ealert "patch tool is missing! Looks like you have to install it"
		exit 1
	fi
}

fetch_file() {
	pkg=$1

	# check first is file downloaded
	if [ -f $pkg ]; then
		return
	fi

	# no, file is not here, let we download it
	eprint "Fetching $pkg..."

	for i in $MIRRORS; do
		# assume $i ends with '/'
		$WGET  $i$pkg
		if [ $? -eq 0 ]; then
			return 0
		fi
	done

	ealert "All mirrors failed. $pkg download failed. Quitting..."
	exit 1
}

extract_file() {
	pkg_name=$1
	pkg_sum=$2

	# check md5
	# extract first column, since it is the hash
	sum=`$MD5SUM $pkg_name | sed -e "$SUMSTR"`
	if [ "$sum" != "$pkg_sum" ]; then
		ealert "Sums for $pkg_name does not match! Either download failed or something went wrong. Please remove"
		ealert "$pkg_name and rerun download again"
		exit 1
	fi

	eprint "Extracting $pkg_name..."
	# run extract now, based on file extension
	case $pkg_name in
		*.bz2)
			$EXTRACT_BZ2 $pkg_name;;
		*.gz)
			$EXTRACT_GZ $pkg_name;;
		*.*)
			ealert "Can't figure out how to extract file. This is a probably packagers fault."
			ealert "Please report this as a bug"
			exit 1;;
	esac
}

compile_install() {
	pkg_dir=$1
	flags_internal=$2
	flags_global=$3

	# go to directory and do standard magic
	if [ ! -d $pkg_dir ]; then
		ealert "FATAL: $pkg_dir does not exsists, but should be there. Please report this as a bug"
		exit 1
	fi
	cd $pkg_dir

	eprint "./configure $flags_internal $flags_global && make"
	./configure $flags_internal $flags_global && make

	if [ $? -ne 0 ]; then
		ealert "Build failed"
		exit 1
	fi

	# we are root, fine, now install
	if [ `id -u` -eq 0 ]; then
		make install
	else
		ealert "Package not installed, since you don't have permissions to do so. This time"
		ealert "in your hands is to run 'make install' from $pkg_dir directory"
	fi

	# we are done, back to the root directory
	cd ..
}

main() {
	echo ""
	echo "::: Ede NetInstall $VERSION :::"
	echo ""

	prepare 

	fetch_file "$EFLTK_PACKAGE"
	fetch_file "$EDE_PACKAGE"

	# first efltk
	extract_file "$EFLTK_PACKAGE" "$EFLTK_SUM"
	compile_install "$EFLTK_DIR" "$EFLTKFLAGS_INTERNAL" "$EFLTKFLAGS"

	# then ede
	extract_file "$EDE_PACKAGE" "$EDE_SUM"
	compile_install "$EDE_DIR" "$EDEFLAGS_INTERNAL" "$EDEFLAGS"

	echo ""
	echo "Enjoy!"
	echo ""
}

main
