# -*- python -*-
# ex: set syntax=python:

c = BuildmasterConfig = {}

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave

c['slaves'] = [ 
 BuildSlave("darkstar", "darkstar851"),
 BuildSlave("chimera", "chimera123"),
 BuildSlave("magneto", "magneto123") 
]

c['slavePortnum'] = 9989

####### CHANGESOURCES
#from buildbot.changes.pb import PBChangeSource
#c['change_source'] = PBChangeSource()

####### SCHEDULERS
from buildbot.scheduler import Nightly

c['schedulers'] = []

s1 = Nightly(name='nightly1', builderNames=['edelib-Slackware-12.0'],       hour=1, minute=0)
s2 = Nightly(name='nightly2', builderNames=['edelib-Slackware-12.0-sunCC'], hour=2, minute=0)
s3 = Nightly(name='nightly3', builderNames=['edelib-FreeBSD-5.3'],          hour=1, minute=0)
s4 = Nightly(name='nightly4', builderNames=['edelib-NetBSD-4.0.1'],         hour=1, minute=0)

s5 = Nightly(name='nightly5', builderNames=['ede-Slackware-12.0'],          hour=1, minute=30)
s6 = Nightly(name='nightly6', builderNames=['ede-Slackware-12.0-sunCC'],    hour=2, minute=30)
s7 = Nightly(name='nightly7', builderNames=['ede-FreeBSD-5.3'],             hour=1, minute=30)
s8 = Nightly(name='nightly8', builderNames=['ede-NetBSD-4.0.1'],            hour=1, minute=30)

c['schedulers'] = [s1, s2, s3, s4, s5, s6, s7, s8]

####### BUILDERS

from buildbot.process import factory
from buildbot.steps.source import SVN
from buildbot.steps.shell import Compile, Configure, ShellCommand, Test, SetProperty
from buildbot.process.properties import WithProperties

####### edelib

EDELIB_TRUNK = "https://ede.svn.sourceforge.net/svnroot/ede/trunk/edelib"

# native compiler
f1 = factory.BuildFactory()
f1.addStep(SVN(svnurl = EDELIB_TRUNK))
f1.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))

f1.addStep(Configure(command=["./configure", "--enable-debug"], 
 env = {"EDELIB_USE_LOCALDIR" : "1"}, haltOnFailure=True))

f1.addStep(ShellCommand(command=["jam", "clean"]))
f1.addStep(Compile(command=["jam"], haltOnFailure=True))
f1.addStep(Test(command=["jam", "tests"], haltOnFailure=True))

# sunCC
f2 = factory.BuildFactory()
f2.addStep(SVN(svnurl=EDELIB_TRUNK))
f2.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))

f2.addStep(Configure(command=["./configure", "--enable-debug", "--with-fltk-path=/opt/fltk-sun"], 
 env = {"EDELIB_USE_LOCALDIR" : "1"}, haltOnFailure=True))

f2.addStep(ShellCommand(command=["jam", "clean"]))
f2.addStep(Compile(command=["jam"], haltOnFailure=True, warningPattern=".*[W|w]arning[: ].*"))
f2.addStep(Test(command=["jam", "tests"], haltOnFailure=True))

b1 = {
 'name': "edelib-Slackware-12.0",
 'slavename': "darkstar",
 'builddir': "edelib-debug-build",
 'factory': f1,
}

b2 = {
 'name': "edelib-Slackware-12.0-sunCC",
 'slavename': "darkstar",
 'builddir': "edelib-debug-build-sunCC",
 'factory': f2,
 'env': {
   "CC" : "/opt/sun/sunstudio12/bin/cc", 
   "CXX" : "/opt/sun/sunstudio12/bin/CC", 
   "LDFLAGS" : "-L/opt/sun/lib/rtlibs",
   "LIBS" : "-lCrun -lCstd",
   "STDLIB" : "$LDFLAGS $LIBS",
 }
}

b3 = {
 'name': "edelib-FreeBSD-5.3",
 'slavename': "chimera",
 'builddir': "edelib-debug-build-freebsd",
 'factory': f1,
 'env': {
   "PKG_CONFIG_PATH" : "/usr/local/libdata",
 }
}

b4 = {
 'name': "edelib-NetBSD-4.0.1",
 'slavename': "magneto",
 'builddir': "edelib-debug-build-netbsd",
 'factory': f1,
}


####### ede

EDE_TRUNK    = "https://ede.svn.sourceforge.net/svnroot/ede/trunk/ede2"

# native compiler
f3 = factory.BuildFactory()
f3.addStep(SVN(svnurl = EDE_TRUNK))
f3.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))

f3.addStep(Configure(command=["./configure", "--enable-debug", "--with-edelib-path=../../edelib-debug-build/build"], 
 haltOnFailure=True))

f3.addStep(ShellCommand(command=["jam", "clean"]))
f3.addStep(Compile(command=["jam", "-sWITHOUT_EFILER=1"], haltOnFailure=True))

# sunCC
f4 = factory.BuildFactory()
f4.addStep(SVN(svnurl = EDE_TRUNK))
f4.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))

f4.addStep(Configure(command=["./configure", "--enable-debug", "--with-edelib-path=../../edelib-debug-build-sunCC/build", "--with-fltk-path=/opt/fltk-sun"], haltOnFailure=True))

f4.addStep(ShellCommand(command=["jam", "clean"]))
f4.addStep(Compile(command=["jam", "-sSUN_COMPILER=1", "-sWITHOUT_EFILER=1", "-sEFLTKINCLUDE=", "-sEFLTKLIB=", "-sEFLTKLIB_NOIMAGES="], 
 haltOnFailure=True, warningPattern=".*[W|w]arning[: ].*"))

# FreeBSD
f5 = factory.BuildFactory()
f5.addStep(SVN(svnurl = EDE_TRUNK))
f5.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))

f5.addStep(Configure(command=["./configure", "--enable-debug", "--with-edelib-path=../../edelib-debug-build-freebsd/build"], 
 haltOnFailure=True))

f5.addStep(ShellCommand(command=["jam", "clean"]))
f5.addStep(Compile(command=["jam", "-sWITHOUT_EFILER=1"], haltOnFailure=True))

# NetBSD
# note how for netbsd is not used --with-edelib-path since env PKG_CONFIG_PATH is set; this
# is because NetBSD shell is stupid
f6 = factory.BuildFactory()
f6.addStep(SVN(svnurl = EDE_TRUNK))
f6.addStep(ShellCommand(command=["./autogen.sh"], haltOnFailure=True))
f6.addStep(Configure(command=["./configure", "--enable-debug"], haltOnFailure=True))

f6.addStep(ShellCommand(command=["jam", "clean"]))
f6.addStep(Compile(command=["jam", "-sWITHOUT_EFILER=1"], haltOnFailure=True))

b5 = {
 'name': "ede-Slackware-12.0",
 'slavename': "darkstar",
 'builddir': "ede-debug-build",
 'factory': f3,
}

b6 = {
 'name': "ede-Slackware-12.0-sunCC",
 'slavename': "darkstar",
 'builddir': "ede-debug-build-sunCC",
 'factory': f4,
 'env': {
   "CC" : "/opt/sun/sunstudio12/bin/cc", 
   "CXX" : "/opt/sun/sunstudio12/bin/CC", 
   "LDFLAGS" : "-L/opt/sun/lib/rtlibs",
   "LIBS" : "-lCrun -lCstd",
   "STDLIB" : "$LDFLAGS $LIBS",
 }
}

b7 = {
 'name': "ede-FreeBSD-5.3",
 'slavename': "chimera",
 'builddir': "ede-debug-build-freebsd",
 'factory': f5,
 'env': {
   "PKG_CONFIG_PATH" : "/usr/local/libdata",
 }
}

b8 = {
 'name': "ede-NetBSD-4.0.1",
 'slavename': "magneto",
 'builddir': "ede-debug-build-netbsd",
 'factory': f6,
 'env': {
   "PKG_CONFIG_PATH" : "../../edelib-debug-build-netbsd/build", 
   "LIBS" : "-lm",
 }
}


c['builders'] = [b1, b2, b3, b4, b5, b6, b7, b8]

####### STATUS TARGETS

c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(http_port=80, allowForce = True))

####### PROJECT IDENTITY
c['projectName'] = "EDE"
c['projectURL'] = "http://equinox-project.org"
c['buildbotURL'] = "http://build.equinox-project.org/"
